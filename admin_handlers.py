from telebot import types, TeleBot
from sensitive_data import admin_ids
import task_database

"""–°–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""


ADMIN_COMMANDS = [
    "/admin - –≤—ã–≤–æ–¥ –æ–±—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏–π –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏",
    "/tasks - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π",
    "/unfinished - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
    "/finish task_id - –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ task_id –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∏ (TODO) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
]


def main(bot: TeleBot):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–¥–º–∏–Ω–∞"""
    def check_admin(func):
        def wrapper(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id
            if user_id in admin_ids:
                return func(message, *args, **kwargs)
            else:
                bot.send_message(message.chat.id, "–£—Ö–∞–¥–∏, —Ç—ã –Ω–µ –∞–¥–º–∏–Ωüò†")
        return wrapper


    """/admin - –≤—ã–≤–æ–¥ –æ–±—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏–π –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    @bot.message_handler(commands=["admin"])
    @check_admin
    def admin_menu(message: types.Message):
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Å–ø–æ–¥–∏–Ω.\n–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã:")
        for comm in ADMIN_COMMANDS:
            bot.send_message(message.chat.id, comm)


    """/tasks - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    @bot.message_handler(commands=["tasks"])
    @check_admin
    def all_tasks(message: types.Message):
        bot.send_message(message.chat.id, "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è:")
        tasks_str = ""
        tasks = task_database.get_all_tasks()
        for task in tasks:
            tasks_str += str(task) + "\n"
        if len(tasks_str) == 0:
            tasks_str = "–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
        bot.send_message(message.chat.id, tasks_str)
    

    """/unfinished - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    @bot.message_handler(commands=["unfinished"])
    @check_admin
    def unfinished_tasks(message: types.Message):
        bot.send_message(message.chat.id, "–í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:")
        tasks_str = ""
        tasks = task_database.get_uncompleted_tasks()
        for task in tasks:
            tasks_str += str(task) + "\n"
        if len(tasks_str) == 0:
            tasks_str = "–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
        bot.send_message(message.chat.id, tasks_str)
    

    """/finish task_id - –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ task_id –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∏ (TODO) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
    @bot.message_handler(commands=["finish"])
    @check_admin
    def finish(message: types.Message):
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        # task_database.mark_task_completed(task_id)
        # bot.send_message(message.chat.id, f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –ø–æ–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º")
